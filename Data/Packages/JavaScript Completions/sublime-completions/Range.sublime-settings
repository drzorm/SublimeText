{
	"scope": "source.js",
	"completions": [
		[
			"compareBoundaryPoints( how: unsigned short, sourceRange: Range ): short\tRange",
			"compareBoundaryPoints(${1:how: unsigned short}, ${2:sourceRange: Range})"
		],
		[
			"isPointInRange( node: Node, offset: unsigned long ): boolean\tRange",
			"isPointInRange(${1:node: Node}, ${2:offset: unsigned long})"
		],
		[
			"comparePoint( node: Node, offset: unsigned long ): short\tRange",
			"comparePoint(${1:node: Node}, ${2:offset: unsigned long})"
		],
		[
			"setStart( node: Node, offset: unsigned long ): void\tRange",
			"setStart(${1:node: Node}, ${2:offset: unsigned long})"
		],
		[
			"setEnd( node: Node, offset: unsigned long ): void\tRange",
			"setEnd(${1:node: Node}, ${2:offset: unsigned long})"
		],
		[
			"surroundContents( newParent: Node ): void\tRange",
			"surroundContents(${1:newParent: Node})"
		],
		[
			"selectNodeContents( node: Node ): void\tRange",
			"selectNodeContents(${1:node: Node})"
		],
		[
			"intersectsNode( node: Node ): boolean\tRange",
			"intersectsNode(${1:node: Node})"
		],
		[
			"START_TO_START: const unsigned short\tRange",
			"START_TO_START"
		],
		[
			"extractContents(): DocumentFragment\tRange",
			"extractContents()"
		],
		[
			"collapse( toStart?: boolean ): void\tRange",
			"collapse(${1:toStart?: boolean})"
		],
		[
			"END_TO_START: const unsigned short\tRange",
			"END_TO_START"
		],
		[
			"START_TO_END: const unsigned short\tRange",
			"START_TO_END"
		],
		[
			"setStartBefore( node: Node ): void\tRange",
			"setStartBefore(${1:node: Node})"
		],
		[
			"cloneContents(): DocumentFragment\tRange",
			"cloneContents()"
		],
		[
			"setStartAfter( node: Node ): void\tRange",
			"setStartAfter(${1:node: Node})"
		],
		[
			"END_TO_END: const unsigned short\tRange",
			"END_TO_END"
		],
		[
			"setEndBefore( node: Node ): void\tRange",
			"setEndBefore(${1:node: Node})"
		],
		[
			"setEndAfter( node: Node ): void\tRange",
			"setEndAfter(${1:node: Node})"
		],
		[
			"selectNode( node: Node ): void\tRange",
			"selectNode(${1:node: Node})"
		],
		[
			"insertNode( node: Node ): void\tRange",
			"insertNode(${1:node: Node})"
		],
		[
			"commonAncestorContainer: Node\tRange",
			"commonAncestorContainer"
		],
		[
			"startOffset: unsigned long\tRange",
			"startOffset"
		],
		[
			"endOffset: unsigned long\tRange",
			"endOffset"
		],
		[
			"deleteContents(): void\tRange",
			"deleteContents()"
		],
		[
			"startContainer: Node\tRange",
			"startContainer"
		],
		[
			"cloneRange(): Range\tRange",
			"cloneRange()"
		],
		[
			"collapsed: boolean\tRange",
			"collapsed"
		],
		[
			"new Range(): Range\tRange",
			"new Range()"
		],
		[
			"endContainer: Node\tRange",
			"endContainer"
		],
		[
			"detach(): void\tRange",
			"detach()"
		],
		[
			"Range(): Range\tRange",
			"Range()"
		]
	]
}